version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: restaurant_booking_db
    environment:
      POSTGRES_DB: restaurant_booking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5


  redis:
    image: redis:7-alpine
    container_name: restaurant_booking_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go приложение
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: restaurant_booking_app
    environment:
      APP_ENV: development
      SERVER_PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: restaurant_booking
      DB_SSLMODE: disable
      JWT_SECRET: supersecretkey
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant_network
    volumes:
      - ./app.log:/root/app.log
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: restaurant_booking_frontend
    ports:
      - "3000:3000"
    depends_on:
      - app
    networks:
      - restaurant_network
    restart: unless-stopped

  # Nginx 
  nginx:
    image: nginx:alpine
    container_name: restaurant_booking_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
      - frontend
    networks:
      - restaurant_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  restaurant_network:
    driver: bridge 